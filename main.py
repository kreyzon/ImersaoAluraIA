# -*- coding: utf-8 -*-
"""Organizador de festas com Agentes de IA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dLVlcON_69uXOVeZ3QJ1s8ODKC-V3sit
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()
# para consultar outras op√ß√µes de modelo
# for model in client.models.list():
#   print(model.name)
MODEL_SIMPLES = "gemini-2.0-flash"
MODEL_COMPLETO = "gemini-2.5-pro-exp-03-25"

# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import json
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Stakeholder --- #
##########################################
def agente_cliente(tipo_evento):

    cliente = Agent(
        name="agente_cliente",
        model=MODEL_SIMPLES,
        instruction="""
        Voc√™ √© um cliente de uma empresa que organiza eventos, sendo assim voc√™ cria um evento espec√≠fico como uma festa de casamento, anivers√°rio ou team building.
        Para criar um evento, voc√™ deve indicar de forma aleatoria uma data futura de at√© um m√™s a frente, qual o hor√°rio e uma quantidade de convidados.
        O tipo de evento ser√° informado a seguir.
        """,
        description="Agente que cria uma demanda para uma equipe de desenvolvimento"
    )

    entrada_do_agente_cliente = f"Problema principal: {tipo_evento}"

    detalhes_evento = call_agent(cliente, entrada_do_agente_cliente)
    return detalhes_evento

### teste do agente cliente
# tipo_evento = "Casamento no Porto"
# detalhes_evento = agente_cliente(tipo_evento)
# print("\n--- üìù Resultado do cliente ---\n")
# display(to_markdown(detalhes_evento))

################################################
# --- Agente 2: Auxiliar Administrativo --- #
################################################
def agente_aux_adm(tipo_evento, detalhes_evento):
    aux_adm = Agent(
        name="agente_aux_adm",
        model=MODEL_SIMPLES,
        instruction="""
        Voc√™ √© um auxiliar administrativo de uma empresa que organiza diversos tipos de eventos e √© respons√°vel por receber os pedidos dos clientes.
        Sua fun√ß√£o vai ser consultar na internet atrav√©s da ferramenta de busca do google (google_search) para descobrir o que √© necess√°rio para o evento acontecer.
        Exemplos do que deve ser levado em conta para isso:
        - festas de casamentos precisam de um local com sal√£o grande ou que seja open space, mesas e cadeiras, decora√ß√£o com flores, um bolo de casamento, aperetivos, bebidas alcoolicas e n√£o-alcoolicas, e um DJ.
        - festas de anivers√°rios para menores de idades precisam de um local fechado, mesas e cadeiras, bolo de anivers√°rio, aperetivos, bebidas n√£o-alcoolicas e um DJ.
        - team building precisam de um local open space, mesas e cadeira, aperetivos, bebidas alcoolicas e n√£o-alcoolicas.

        Devolva a resposta em formato que pode ser utilizado com array do python e a sa√≠da deve conter estritamente apenas a estrutura de dados do python e que siga o JSON schema a seguir

        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "Evento de Casamento",
          "description": "Schema para descrever detalhes de um evento de casamento, incluindo elementos essenciais.",
          "type": "object",
          "properties": {
            "Tipo de Evento": {
              "type": "string",
              "description": "O tipo do evento, por exemplo, 'Casamento'."
            },
            "Localiza√ß√£o": {
              "type": "string",
              "description": "A localiza√ß√£o do evento (cidade e pa√≠s)."
            },
            "Data": {
              "type": "string",
              "description": "A data do evento."
            },
            "Hor√°rio": {
              "type": "string",
              "description": "O hor√°rio do evento."
            },
            "N√∫mero de Convidados": {
              "type": "integer",
              "description": "O n√∫mero estimado de convidados."
              // Podemos adicionar "minimum": 0 se for o caso, mas para este exemplo n√£o √© estritamente necess√°rio com base nos dados fornecidos.
            },
            "Elementos Essenciais": {
              "type": "array",
              "description": "Uma lista dos elementos essenciais necess√°rios para o evento.",
              "items": {
                "type": "object",
                "properties": {
                  "Categoria": {
                    "type": "string",
                    "description": "A categoria do elemento essencial (ex: 'Local/Espa√ßo para Casamento', 'Catering')."
                  },
                  "Necessidades": {
                    "type": "array",
                    "description": "Uma lista de necessidades ou op√ß√µes espec√≠ficas dentro desta categoria.",
                    "items": {
                      "type": "string",
                      "description": "Uma descri√ß√£o individual de uma necessidade ou op√ß√£o."
                    }
                  }
                },
                "required": [
                  "Categoria",
                  "Necessidades"
                ]
              }
            }
          },
          "required": [
            "Tipo de Evento",
            "Localiza√ß√£o",
            "Data",
            "Hor√°rio",
            "N√∫mero de Convidados",
            "Elementos Essenciais"
          ]
        }
        """,
        description="Agente que busca o que precisa ",
        tools=[google_search]
    )

    entrada_do_agente_aux_adm = f"Tipo de evento: {tipo_evento}\nDetalhes do evento: {detalhes_evento}"
    # Executa o agente
    plano_evento = call_agent(aux_adm, entrada_do_agente_aux_adm)
    return plano_evento

### teste o agente auxiliar administrativo
# plano_evento = agente_aux_adm(tipo_evento, detalhes_evento)
# print("\n--- üìù Resultado do auxiliar administrativo ---\n")
# display(to_markdown(plano_evento))

######################################
# --- Agente 3: Analista de or√ßamentos --- #
######################################
def agente_analista_budget(tipo_evento, categoria, elemento_essencial):
    analista_budget = Agent(
        name="agente_analista_budget",
        model=MODEL_SIMPLES,
        instruction="""
        Voc√™ √© um analista de or√ßamentos especializado em uma categoria espec√≠fica, como fazer or√ßamento para alugar locais ou or√ßamento para catering ou or√ßamento para contratar uma banda.
        Sua fun√ß√£o vai ser consultar na internet atrav√©s da ferramenta de busca do google (google_search) para atender aos elementos essenciais do tipo de evento que lhe foram informados.
        Busque 5 op√ß√µes de or√ßamento para a sua categoria e escolha as 3 op√ß√µes mais baratas.

        Devolva a resposta em formato que pode ser utilizado com array do python e a sa√≠da deve conter estritamente apenas a estrutura de dados do python e que siga o JSON schema a seguir
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "Lista de Op√ß√µes",
          "description": "Schema para uma lista de op√ß√µes, cada uma com nome, pre√ßo e caracter√≠sticas.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Op√ß√£o": {
                "type": "string",
                "description": "O nome ou t√≠tulo da op√ß√£o."
              },
              "Pre√ßo": {
                "type": "string",
                "description": "Informa√ß√£o sobre o pre√ßo da op√ß√£o."
              },
              "Caracter√≠sticas": {
                "type": "array",
                "description": "Uma lista de caracter√≠sticas associadas a esta op√ß√£o.",
                "items": {
                  "type": "string",
                  "description": "Uma descri√ß√£o individual de uma caracter√≠stica."
                }
              }
            },
            "required": [
              "Op√ß√£o",
              "Pre√ßo",
              "Caracter√≠sticas"
            ]
          }
        }
        """,
        description="Agente que atua como analista de or√ßamentos",
        tools=[google_search]
    )
    entrada_do_agente_analista_budget = f"Tipo de evento: {tipo_evento}\nCategoria Or√ßamento: {categoria}\nElemento essencial: {elemento_essencial}"
    # Executa o agente
    rascunho = call_agent(analista_budget, entrada_do_agente_analista_budget)
    return rascunho

### teste o agente analista de or√ßamento
# import json
# plano_object = json.loads(plano_evento.replace("```json", "").replace("```", ""))
# budget = agente_analista_budget(tipo_evento, plano_object.get("Elementos Essenciais")[0].get("Categoria"), plano_object.get("Elementos Essenciais")[0].get("Necessidades"))
# print("\n--- üìù Resultado do analista de or√ßamento ---\n")
# display(to_markdown(budget))

##########################################
# --- Agente 4: Organizador do evento --- #
##########################################

def agente_organizador(tipo_evento, budgets):
    organizador = Agent(
        name="agente_organizador",
        model=MODEL_SIMPLES,
        instruction="""
        Voc√™ √© o organizador de um evento.
        Sua fun√ß√£o inicial ser√° analisar os or√ßamentos recebidos (budgets) de diversas categorias e montar 3 planos bastante resumidos para apresentar ao cliente, citando o principalmente o valor de cada um deles.
        """,
        description="Agente organizador.",
    )
    entrada_do_agente_organizador = f"Tipo de evento: {tipo_evento}\Lista de Or√ßamentos: {budgets}\n"
    # Executa o agente
    evento = call_agent(organizador, entrada_do_agente_organizador)
    return evento

def agente_atendente(tipo_evento, evento, msg):
    atendente = Agent(
        name="agente_atendente",
        model=MODEL_SIMPLES,
        instruction="""
        Voc√™ √© um atendente de um evento e ir√° conversar com o cliente sobre o evento informado.
        Voc√™ ir√° receber um plano de evento (evento) e uma resposta do cliente (msg) e sempre deixar√° uma pergunta para o cliente at√© que ele confirme que est√° satisfeito com o evento.
        """,
        description="Agente atendente.",
    )
    entrada_do_agente_atendente = f"Tipo de evento: {tipo_evento}\Evento: {evento}\nResposta do cliente"
    # Executa o agente
    resposta_atendente = call_agent(atendente, entrada_do_agente_atendente)
    return resposta_atendente

### teste o agente analista de or√ßamento
# plano_object = json.loads(plano_evento.replace("```json", "").replace("```", ""))
# budgets = []
# for elemento_essencial in plano_object.get("Elementos Essenciais"):
#   budget = agente_analista_budget(tipo_evento, elemento_essencial.get("Categoria"), elemento_essencial.get("Necessidades"))
#   budgets.append(budget)
# evento = agente_organizador(tipo_evento, budgets)
# print("\n--- üìù Resultado do organizador do evento ---\n")
# display(to_markdown(evento))

def remover_conteudo_ate_substring(texto_completo, marcador_substring):
  """
  Remove o conte√∫do de uma string at√© encontrar um marcador_substring.

  Args:
    texto_completo: A string original.
    marcador_substring: A substring que marca o ponto a partir do qual
                        o conte√∫do deve ser mantido.

  Returns:
    A parte da string original ap√≥s o marcador_substring (incluindo o marcador,
    se quiseres manter a partir dele, ou excluindo-o, como no exemplo).
    Se o marcador n√£o for encontrado, devolve a string original.
  """
  posicao_marcador = texto_completo.find(marcador_substring)

  # Verifica se o marcador foi encontrado
  if posicao_marcador != -1:
    # Calcula a posi√ß√£o onde a substring marcador termina
    fim_marcador = posicao_marcador + len(marcador_substring)
    # Retorna a parte da string ap√≥s o marcador
    return texto_completo[fim_marcador:]
  else:
    # Se o marcador n√£o for encontrado, retorna a string original
    # print(f"Aten√ß√£o: O marcador '{marcador_substring}' n√£o foi encontrado na string.")
    return texto_completo

print("üöÄ Iniciando o Sistema de Cria√ß√£o de MVP com 4 Agentes üöÄ")

# --- Obter o T√≥pico do Usu√°rio ---
tipo_evento = input("Ol√°, somos a Kreyzon Events, em que tipo de evento podemos ajudar? ")

# Inserir l√≥gica do sistema de agentes ################################################
if not tipo_evento:
    print("Voc√™ esqueceu de digitar o que quer!")
else:
    print(f"Maravilha! Vou falar com a equipe para lhe dar as melhores op√ß√µes para seu evento.")

    detalhes_evento = agente_cliente(tipo_evento)
    # trace flow
    # print("\n--- üìù Resultado do cliente ---\n")
    # display(to_markdown(detalhes_evento))
    # print("--------------------------------------------------------------")

    plano_evento = agente_aux_adm(tipo_evento, detalhes_evento)
    # trace flow
    # print("\n--- üìù Resultado do Product Owner ---\n")
    # display(to_markdown(plano_evento))
    # print("--------------------------------------------------------------")

    # cria√ß√£o
    plano_object = json.loads(remover_conteudo_ate_substring(plano_evento, "```json").replace("```json", "").replace("```", ""))
    budgets = []
    for elemento_essencial in plano_object.get("Elementos Essenciais"):
      budget = agente_analista_budget(tipo_evento, elemento_essencial.get("Categoria"), elemento_essencial.get("Necessidades"))
      budgets.append(budget)

    # trace flow
    # print("\n--- üìù Resultado do Scrum Master ---\n")
    # display(to_markdown(rascunho_de_post))
    # print("--------------------------------------------------------------")

    evento = agente_organizador(tipo_evento, budgets)
    print("\n--- üìù Resultado do Evento ---\n")
    display(to_markdown(evento))
    print("--------------------------------------------------------------")

msg = input("Voc√™ gostou de alguma das op√ß√µes ou tem alguma d√∫vida sobre o evento? ")
    while msg != 'fim':
        resposta_atendente = agente_atendente(tipo_evento, evento, msg)
        display(to_markdown(resposta_atendente))
        print("--------------------------------------------------------------")
        msg = input()
